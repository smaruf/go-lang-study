name: Go CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20.x, 1.21.x]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: Build projects
      run: |
        # Build individual projects with go.mod
        for dir in src/*/; do
          if [ -f "$dir/go.mod" ]; then
            echo "Building $dir"
            cd "$dir"
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v ./...
            cd - > /dev/null
          fi
        done
        
        # Build standalone Go files
        for file in src/*.go; do
          if [ -f "$file" ] && [[ "$file" != *"_test.go" ]]; then
            echo "Building $file"
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "/tmp/$(basename $file .go)" "$file"
          fi
        done

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: Run gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21.x

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        for dir in src/*/; do
          if [ -f "$dir/go.mod" ]; then
            echo "Checking vulnerabilities in $dir"
            cd "$dir"
            govulncheck ./...
            cd - > /dev/null
          fi
        done