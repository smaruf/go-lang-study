// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	. "common/proto"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetAccount(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*AccountInfo, error)
	CreateAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error)
	CloseAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error)
	CheckAccount(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*Message, error)
	GetAccountBalance(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*BalanceInfo, error)
	GetTransaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*TransactionInfo, error)
	FindTransactions(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (WalletService_FindTransactionsClient, error)
	InitiateTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error)
	ConfirmTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error)
	RevertTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error)
	RequestTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	ResponseTransferRequest(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error)
	ManageAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetAccount(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CloseAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/CloseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CheckAccount(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.WalletService/CheckAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetAccountBalance(ctx context.Context, in *AccountFilter, opts ...grpc.CallOption) (*BalanceInfo, error) {
	out := new(BalanceInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FindTransactions(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (WalletService_FindTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WalletService_ServiceDesc.Streams[0], "/common.WalletService/FindTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceFindTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_FindTransactionsClient interface {
	Recv() (*TransactionInfo, error)
	grpc.ClientStream
}

type walletServiceFindTransactionsClient struct {
	grpc.ClientStream
}

func (x *walletServiceFindTransactionsClient) Recv() (*TransactionInfo, error) {
	m := new(TransactionInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) InitiateTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/InitiateTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ConfirmTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/ConfirmTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RevertTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/RevertTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RequestTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.WalletService/RequestTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ResponseTransferRequest(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*TransactionInfo, error) {
	out := new(TransactionInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/ResponseTransferRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ManageAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/common.WalletService/ManageAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility
type WalletServiceServer interface {
	GetAccount(context.Context, *AccountFilter) (*AccountInfo, error)
	CreateAccount(context.Context, *AccountInfo) (*AccountInfo, error)
	CloseAccount(context.Context, *AccountInfo) (*AccountInfo, error)
	CheckAccount(context.Context, *AccountFilter) (*Message, error)
	GetAccountBalance(context.Context, *AccountFilter) (*BalanceInfo, error)
	GetTransaction(context.Context, *TransactionFilter) (*TransactionInfo, error)
	FindTransactions(*TransactionFilter, WalletService_FindTransactionsServer) error
	InitiateTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error)
	ConfirmTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error)
	RevertTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error)
	RequestTransfer(context.Context, *TransactionInfo) (*Message, error)
	ResponseTransferRequest(context.Context, *TransactionInfo) (*TransactionInfo, error)
	ManageAccount(context.Context, *AccountInfo) (*AccountInfo, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (UnimplementedWalletServiceServer) GetAccount(context.Context, *AccountFilter) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedWalletServiceServer) CreateAccount(context.Context, *AccountInfo) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedWalletServiceServer) CloseAccount(context.Context, *AccountInfo) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseAccount not implemented")
}
func (UnimplementedWalletServiceServer) CheckAccount(context.Context, *AccountFilter) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccount not implemented")
}
func (UnimplementedWalletServiceServer) GetAccountBalance(context.Context, *AccountFilter) (*BalanceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedWalletServiceServer) GetTransaction(context.Context, *TransactionFilter) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedWalletServiceServer) FindTransactions(*TransactionFilter, WalletService_FindTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method FindTransactions not implemented")
}
func (UnimplementedWalletServiceServer) InitiateTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTransfer not implemented")
}
func (UnimplementedWalletServiceServer) ConfirmTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransfer not implemented")
}
func (UnimplementedWalletServiceServer) RevertTransfer(context.Context, *TransactionInfo) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertTransfer not implemented")
}
func (UnimplementedWalletServiceServer) RequestTransfer(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTransfer not implemented")
}
func (UnimplementedWalletServiceServer) ResponseTransferRequest(context.Context, *TransactionInfo) (*TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseTransferRequest not implemented")
}
func (UnimplementedWalletServiceServer) ManageAccount(context.Context, *AccountInfo) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageAccount not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetAccount(ctx, req.(*AccountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CloseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CloseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/CloseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CloseAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CheckAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CheckAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/CheckAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CheckAccount(ctx, req.(*AccountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetAccountBalance(ctx, req.(*AccountFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransaction(ctx, req.(*TransactionFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FindTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).FindTransactions(m, &walletServiceFindTransactionsServer{stream})
}

type WalletService_FindTransactionsServer interface {
	Send(*TransactionInfo) error
	grpc.ServerStream
}

type walletServiceFindTransactionsServer struct {
	grpc.ServerStream
}

func (x *walletServiceFindTransactionsServer) Send(m *TransactionInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_InitiateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).InitiateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/InitiateTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).InitiateTransfer(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ConfirmTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ConfirmTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/ConfirmTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ConfirmTransfer(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RevertTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RevertTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/RevertTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RevertTransfer(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RequestTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RequestTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/RequestTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RequestTransfer(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ResponseTransferRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ResponseTransferRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/ResponseTransferRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ResponseTransferRequest(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ManageAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ManageAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.WalletService/ManageAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ManageAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletService_GetAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _WalletService_CreateAccount_Handler,
		},
		{
			MethodName: "CloseAccount",
			Handler:    _WalletService_CloseAccount_Handler,
		},
		{
			MethodName: "CheckAccount",
			Handler:    _WalletService_CheckAccount_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _WalletService_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _WalletService_GetTransaction_Handler,
		},
		{
			MethodName: "InitiateTransfer",
			Handler:    _WalletService_InitiateTransfer_Handler,
		},
		{
			MethodName: "ConfirmTransfer",
			Handler:    _WalletService_ConfirmTransfer_Handler,
		},
		{
			MethodName: "RevertTransfer",
			Handler:    _WalletService_RevertTransfer_Handler,
		},
		{
			MethodName: "RequestTransfer",
			Handler:    _WalletService_RequestTransfer_Handler,
		},
		{
			MethodName: "ResponseTransferRequest",
			Handler:    _WalletService_ResponseTransferRequest_Handler,
		},
		{
			MethodName: "ManageAccount",
			Handler:    _WalletService_ManageAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindTransactions",
			Handler:       _WalletService_FindTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/wallet.proto",
}

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	VerifyPin(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	VerifyBalance(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	VerifyAccounts(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	VerifyAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error)
	LockAccount(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	UnlockAccount(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	NotifyTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	NotifyAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error)
	PushAuditTrail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	PushAccountAction(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error)
	PushTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error)
	PushNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Message, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) VerifyPin(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/VerifyPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) VerifyBalance(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/VerifyBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) VerifyAccounts(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/VerifyAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) VerifyAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/VerifyAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) LockAccount(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) UnlockAccount(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) NotifyTransfer(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/NotifyTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) NotifyAccount(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/NotifyAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PushAuditTrail(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/PushAuditTrail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PushAccountAction(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/PushAccountAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PushTransaction(ctx context.Context, in *TransactionInfo, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/PushTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PushNotification(ctx context.Context, in *Notification, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/common.CoreService/PushNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	VerifyPin(context.Context, *TransactionInfo) (*Message, error)
	VerifyBalance(context.Context, *TransactionInfo) (*Message, error)
	VerifyAccounts(context.Context, *TransactionInfo) (*Message, error)
	VerifyAccount(context.Context, *AccountInfo) (*Message, error)
	LockAccount(context.Context, *TransactionInfo) (*Message, error)
	UnlockAccount(context.Context, *TransactionInfo) (*Message, error)
	NotifyTransfer(context.Context, *TransactionInfo) (*Message, error)
	NotifyAccount(context.Context, *AccountInfo) (*Message, error)
	PushAuditTrail(context.Context, *Message) (*Message, error)
	PushAccountAction(context.Context, *AccountInfo) (*Message, error)
	PushTransaction(context.Context, *TransactionInfo) (*Message, error)
	PushNotification(context.Context, *Notification) (*Message, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) VerifyPin(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPin not implemented")
}
func (UnimplementedCoreServiceServer) VerifyBalance(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBalance not implemented")
}
func (UnimplementedCoreServiceServer) VerifyAccounts(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccounts not implemented")
}
func (UnimplementedCoreServiceServer) VerifyAccount(context.Context, *AccountInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedCoreServiceServer) LockAccount(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAccount not implemented")
}
func (UnimplementedCoreServiceServer) UnlockAccount(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockAccount not implemented")
}
func (UnimplementedCoreServiceServer) NotifyTransfer(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTransfer not implemented")
}
func (UnimplementedCoreServiceServer) NotifyAccount(context.Context, *AccountInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAccount not implemented")
}
func (UnimplementedCoreServiceServer) PushAuditTrail(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAuditTrail not implemented")
}
func (UnimplementedCoreServiceServer) PushAccountAction(context.Context, *AccountInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAccountAction not implemented")
}
func (UnimplementedCoreServiceServer) PushTransaction(context.Context, *TransactionInfo) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTransaction not implemented")
}
func (UnimplementedCoreServiceServer) PushNotification(context.Context, *Notification) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNotification not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_VerifyPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).VerifyPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/VerifyPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).VerifyPin(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_VerifyBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).VerifyBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/VerifyBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).VerifyBalance(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_VerifyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).VerifyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/VerifyAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).VerifyAccounts(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/VerifyAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).VerifyAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).LockAccount(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).UnlockAccount(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_NotifyTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).NotifyTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/NotifyTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).NotifyTransfer(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_NotifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).NotifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/NotifyAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).NotifyAccount(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PushAuditTrail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PushAuditTrail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/PushAuditTrail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PushAuditTrail(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PushAccountAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PushAccountAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/PushAccountAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PushAccountAction(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PushTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PushTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/PushTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PushTransaction(ctx, req.(*TransactionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.CoreService/PushNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PushNotification(ctx, req.(*Notification))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyPin",
			Handler:    _CoreService_VerifyPin_Handler,
		},
		{
			MethodName: "VerifyBalance",
			Handler:    _CoreService_VerifyBalance_Handler,
		},
		{
			MethodName: "VerifyAccounts",
			Handler:    _CoreService_VerifyAccounts_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _CoreService_VerifyAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _CoreService_LockAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _CoreService_UnlockAccount_Handler,
		},
		{
			MethodName: "NotifyTransfer",
			Handler:    _CoreService_NotifyTransfer_Handler,
		},
		{
			MethodName: "NotifyAccount",
			Handler:    _CoreService_NotifyAccount_Handler,
		},
		{
			MethodName: "PushAuditTrail",
			Handler:    _CoreService_PushAuditTrail_Handler,
		},
		{
			MethodName: "PushAccountAction",
			Handler:    _CoreService_PushAccountAction_Handler,
		},
		{
			MethodName: "PushTransaction",
			Handler:    _CoreService_PushTransaction_Handler,
		},
		{
			MethodName: "PushNotification",
			Handler:    _CoreService_PushNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet.proto",
}
